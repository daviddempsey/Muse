{"version":3,"file":"firebase-storage.js","sources":["../../node_modules/tslib/tslib.es6.js","../util/src/errors.ts","../component/src/component.ts","../storage/src/implementation/constants.ts","../storage/src/implementation/error.ts","../storage/src/implementation/string.ts","../storage/src/implementation/taskenums.ts","../storage/src/implementation/xhrio.ts","../storage/src/implementation/xhrio_network.ts","../storage/src/implementation/xhriopool.ts","../storage/src/implementation/type.ts","../storage/src/implementation/fs.ts","../storage/src/implementation/blob.ts","../storage/src/implementation/location.ts","../storage/src/implementation/json.ts","../storage/src/implementation/path.ts","../storage/src/implementation/url.ts","../storage/src/implementation/metadata.ts","../storage/src/implementation/list.ts","../storage/src/implementation/requestinfo.ts","../storage/src/implementation/requests.ts","../storage/src/implementation/observer.ts","../storage/src/tasksnapshot.ts","../storage/src/implementation/async.ts","../storage/src/task.ts","../storage/src/reference.ts","../storage/compat/tasksnapshot.ts","../storage/compat/task.ts","../storage/compat/list.ts","../storage/compat/reference.ts","../storage/src/implementation/failrequest.ts","../storage/src/implementation/request.ts","../storage/src/implementation/backoff.ts","../storage/src/service.ts","../storage/compat/service.ts","../storage/compat/index.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if (e.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  readonly name = ERROR_NAME;\n\n  constructor(\n    readonly code: string,\n    message: string,\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","import { FirebaseError } from '@firebase/util';\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\nexport class FirebaseStorageError extends FirebaseError {\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  constructor(code: Code, message: string) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    // Without this, `instanceof FirebaseStorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, FirebaseStorageError.prototype);\n  }\n\n  codeEquals(code: Code): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  get message(): string {\n    if (this.customData.serverResponse) {\n      return `${this.message}\\n${this.customData.serverResponse}`;\n    } else {\n      return this.message;\n    }\n  }\n\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n  }\n}\n\nexport const errors = {};\n\nexport type Code = string;\nexport const Code = {\n  // Shared between all platforms\n  UNKNOWN: 'unknown',\n  OBJECT_NOT_FOUND: 'object-not-found',\n  BUCKET_NOT_FOUND: 'bucket-not-found',\n  PROJECT_NOT_FOUND: 'project-not-found',\n  QUOTA_EXCEEDED: 'quota-exceeded',\n  UNAUTHENTICATED: 'unauthenticated',\n  UNAUTHORIZED: 'unauthorized',\n  RETRY_LIMIT_EXCEEDED: 'retry-limit-exceeded',\n  INVALID_CHECKSUM: 'invalid-checksum',\n  CANCELED: 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME: 'invalid-event-name',\n  INVALID_URL: 'invalid-url',\n  INVALID_DEFAULT_BUCKET: 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET: 'no-default-bucket',\n  CANNOT_SLICE_BLOB: 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE: 'server-file-wrong-size',\n  NO_DOWNLOAD_URL: 'no-download-url',\n  INVALID_ARGUMENT: 'invalid-argument',\n  INVALID_ARGUMENT_COUNT: 'invalid-argument-count',\n  APP_DELETED: 'app-deleted',\n  INVALID_ROOT_OPERATION: 'invalid-root-operation',\n  INVALID_FORMAT: 'invalid-format',\n  INTERNAL_ERROR: 'internal-error',\n  UNSUPPORTED_ENVIRONMENT: 'unsupported-environment'\n};\n\nexport function prependCode(code: Code): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): FirebaseStorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new FirebaseStorageError(Code.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): FirebaseStorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new FirebaseStorageError(Code.UNAUTHENTICATED, message);\n}\n\nexport function unauthorized(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function invalidArgument(message: string): FirebaseStorageError {\n  return new FirebaseStorageError(Code.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): FirebaseStorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new FirebaseStorageError(\n    Code.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n */\nexport function invalidRootOperation(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(\n  format: string,\n  message: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): FirebaseStorageError {\n  throw new FirebaseStorageError(\n    Code.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\n\n/**\n * An enumeration of the possible string formats for upload.\n */\nexport type StringFormat = string;\nexport const StringFormat = {\n  RAW: 'raw',\n  BASE64: 'base64',\n  BASE64URL: 'base64url',\n  DATA_URL: 'data_url'\n};\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = atob(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * Enum for task events.\n */\nexport type TaskEvent = string;\nexport const TaskEvent = {\n  /** Triggered whenever the task changes or progress is updated. */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport type InternalTaskState = string;\nexport const InternalTaskState = {\n  RUNNING: 'running',\n  PAUSING: 'pausing',\n  PAUSED: 'paused',\n  SUCCESS: 'success',\n  CANCELING: 'canceling',\n  CANCELED: 'canceled',\n  ERROR: 'error'\n};\n\n/**\n * External (API-surfaced) enum for task state.\n */\nexport type TaskState = string;\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n */\n\n/**\n * XHR headers\n */\nexport interface Headers {\n  [name: string]: string | number;\n}\n\nexport interface XhrIo {\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<XhrIo>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponseText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Headers, XhrIo, ErrorCode } from './xhrio';\nimport { internalError } from './error';\n\n/**\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\n * doesn't work in React Native on Android.\n */\nexport class NetworkXhrIo implements XhrIo {\n  private xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<XhrIo>;\n  private sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve(this);\n      });\n    });\n  }\n\n  /**\n   * @override\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<XhrIo> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  /**\n   * @override\n   */\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  /**\n   * @override\n   */\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  /**\n   * @override\n   */\n  getResponseText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponseText() before sending');\n    }\n    return this.xhr_.responseText;\n  }\n\n  /**\n   * Aborts the request.\n   * @override\n   */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  /**\n   * @override\n   */\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  /**\n   * @override\n   */\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  /**\n   * @override\n   */\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Replacement for goog.net.XhrIoPool that works with fbs.XhrIo.\n */\nimport { XhrIo } from './xhrio';\nimport { NetworkXhrIo } from './xhrio_network';\n\n/**\n * Factory-like class for creating XhrIo instances.\n */\nexport class XhrIoPool {\n  createXhrIo(): XhrIo {\n    return new NetworkXhrIo();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirebaseStorageError } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw new FirebaseStorageError(\n      Code.INVALID_ARGUMENT,\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw new FirebaseStorageError(\n      Code.INVALID_ARGUMENT,\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport * as type from './type';\nimport { Code, FirebaseStorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (type.isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new FirebaseStorageError(\n        Code.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport * as fs from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport * as type from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (type.isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (type.isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = fs.sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (type.isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(fs.getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (type.isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = DEFAULT_HOST.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      '(?:storage.googleapis.com|storage.cloud.google.com)';\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as type from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (type.isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { DEFAULT_HOST } from './constants';\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(urlPart: string): string {\n  return `https://${DEFAULT_HOST}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport * as json from './json';\nimport { Location } from './location';\nimport * as path from './path';\nimport * as type from './type';\nimport * as UrlUtils from './url';\nimport { Reference } from '../reference';\nimport { StorageService } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!type.isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return path.lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: StorageService): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service.makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: StorageService,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: StorageService,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = json.jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string\n): string | null {\n  const obj = json.jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!type.isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = UrlUtils.makeUrl(urlPart);\n    const queryString = UrlUtils.makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Metadata,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport * as json from './json';\nimport { ListResult } from '../list';\nimport { StorageService } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: StorageService,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service.makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service.makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: StorageService,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = json.jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = (obj as unknown) as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Headers, XhrIo } from './xhrio';\n\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\nexport class RequestInfo<T> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n\n  errorHandler:\n    | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: (p1: XhrIo, p2: string) => T,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  FirebaseStorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown\n} from './error';\nimport { Location } from './location';\nimport * as MetadataUtils from './metadata';\nimport * as ListResultUtils from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport * as type from './type';\nimport * as UrlUtils from './url';\nimport { XhrIo } from './xhrio';\nimport { StorageService } from '../service';\n\n/**\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: StorageService,\n  mappings: MetadataUtils.Mappings\n): (p1: XhrIo, p2: string) => Metadata {\n  function handler(xhr: XhrIo, text: string): Metadata {\n    const metadata = MetadataUtils.fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: StorageService,\n  bucket: string\n): (p1: XhrIo, p2: string) => ListResult {\n  function handler(xhr: XhrIo, text: string): ListResult {\n    const listResult = ListResultUtils.fromResponseString(\n      service,\n      bucket,\n      text\n    );\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: StorageService,\n  mappings: MetadataUtils.Mappings\n): (p1: XhrIo, p2: string) => string | null {\n  function handler(xhr: XhrIo, text: string): string | null {\n    const metadata = MetadataUtils.fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return MetadataUtils.downloadUrlFromResourceString(\n      metadata as Metadata,\n      text\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError {\n  function errorHandler(\n    xhr: XhrIo,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      newErr = unauthenticated();\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: XhrIo,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: StorageService,\n  location: Location,\n  mappings: MetadataUtils.Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: StorageService,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: StorageService,\n  location: Location,\n  mappings: MetadataUtils.Mappings\n): RequestInfo<string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: StorageService,\n  location: Location,\n  metadata: Metadata,\n  mappings: MetadataUtils.Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'PATCH';\n  const body = MetadataUtils.toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: StorageService,\n  location: Location\n): RequestInfo<void> {\n  const urlPart = location.fullServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: XhrIo, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\nexport function multipartUpload(\n  service: StorageService,\n  location: Location,\n  mappings: MetadataUtils.Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = MetadataUtils.toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(xhr: XhrIo, allowed?: string[]): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: StorageService,\n  location: Location,\n  mappings: MetadataUtils.Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': blob.size(),\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = MetadataUtils.toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: XhrIo): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(type.isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: StorageService,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: XhrIo): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const resumableUploadChunkSize: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: StorageService,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: MetadataUtils.Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand =\n    bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': status_.current\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr: XhrIo, text: string): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as type from './type';\nimport { FirebaseStorageError } from './error';\n\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: FirebaseStorageError) => void;\nexport type CompleteFn = () => void;\nexport type Unsubscribe = () => void;\n\nexport interface StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n}\n\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      type.isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error;\n      this.complete = complete;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TaskState } from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport { Reference } from './reference';\nimport { UploadTask } from './task';\n\nexport class UploadTaskSnapshot {\n  constructor(\n    readonly bytesTransferred: number,\n    readonly totalBytes: number,\n    readonly state: TaskState,\n    readonly metadata: Metadata,\n    readonly task: UploadTask,\n    readonly ref: Reference\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport { canceled, Code, FirebaseStorageError } from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  CompleteFn,\n  ErrorFn,\n  Observer,\n  StorageObserver,\n  Subscribe,\n  Unsubscribe\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot } from './tasksnapshot';\nimport { async as fbsAsync } from './implementation/async';\nimport * as fbsMetadata from './implementation/metadata';\nimport * as fbsRequests from './implementation/requests';\nimport { Reference } from './reference';\nimport { getMappings } from './implementation/metadata';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * @internal\n   */\n  _blob: FbsBlob;\n  /**\n   * @internal\n   */\n  _metadata: Metadata | null;\n  private _mappings: fbsMetadata.Mappings;\n  /**\n   * @internal\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserver<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * @internal\n   */\n  _state: InternalTaskState;\n  private _error?: FirebaseStorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: FirebaseStorageError) => void;\n  private _metadataErrorHandler: (p1: FirebaseStorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: FirebaseStorageError) => void = undefined;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error.codeEquals(Code.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error.codeEquals(Code.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(callback: (p1: string | null) => void): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._ref.storage.getAuthToken().then(authToken => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = fbsRequests.createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken(authToken => {\n      const requestInfo = fbsRequests.getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as fbsRequests.ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize =\n      fbsRequests.resumableUploadChunkSize * this._chunkMultiplier;\n    const status = new fbsRequests.ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken(authToken => {\n      let requestInfo;\n      try {\n        requestInfo = fbsRequests.continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = uploadRequest;\n      uploadRequest\n        .getPromise()\n        .then((newStatus: fbsRequests.ResumableUploadStatus) => {\n          this._increaseMultiplier();\n          this._request = undefined;\n          this._updateProgress(newStatus.current);\n          if (newStatus.finalized) {\n            this._metadata = newStatus.metadata;\n            this._transition(InternalTaskState.SUCCESS);\n          } else {\n            this.completeTransitions_();\n          }\n        }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize =\n      fbsRequests.resumableUploadChunkSize * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = fbsRequests.getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = fbsRequests.multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return new UploadTaskSnapshot(\n      this._transferred,\n      this._blob.size(),\n      externalState,\n      this._metadata!,\n      this,\n      this._ref\n    );\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | ((a: UploadTaskSnapshot) => unknown),\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    const observer = new Observer(nextOrObserver, error, completed);\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: FirebaseStorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(\n    onRejected: (p1: FirebaseStorageError) => T | Promise<T>\n  ): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: FirebaseStorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as FirebaseStorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase Storage Reference class.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, parent, lastComponent } from './implementation/path';\nimport {\n  list as requestsList,\n  getMetadata as requestsGetMetadata,\n  updateMetadata as requestsUpdateMetadata,\n  getDownloadUrl as requestsGetDownloadUrl,\n  deleteObject as requestsDeleteObject\n} from './implementation/requests';\nimport { StringFormat, dataFromString } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { StorageService } from './service';\nimport { ListOptions, ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @param location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  /**\n   * @internal\n   */\n  _location: Location;\n\n  constructor(private _service: StorageService, location: string | Location) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location);\n    }\n  }\n\n  /**\n   * @returns The URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected newRef(service: StorageService, location: Location): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * @returns An reference to the root of this\n   *     object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this.newRef(this._service, location);\n  }\n\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  get storage(): StorageService {\n    return this._service;\n  }\n\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Uploads a blob to this object's location.\n * @public\n * @param ref - Storage Reference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns An UploadTask that lets you control and\n *     observe the upload.\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata: Metadata | null = null\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * @public\n * @param ref - Storage Reference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded object.\n * @returns An UploadTask that lets you control and\n *     observe the upload.\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('putString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return new UploadTask(ref, new FbsBlob(data.data, true), metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - Storage Reference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @internal\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - Storage Reference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport async function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const authToken = await ref.storage.getAuthToken();\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * A promise that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - Storage Reference to get metadata from.\n */\nexport async function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const authToken = await ref.storage.getAuthToken();\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - Storage Reference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A promise that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport async function updateMetadata(\n  ref: Reference,\n  metadata: Metadata\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const authToken = await ref.storage.getAuthToken();\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A promise that resolves with the download\n *     URL for this object.\n */\nexport async function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const authToken = await ref.storage.getAuthToken();\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequest(requestInfo, authToken)\n    .getPromise()\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - Storage Reference for object to delete.\n * @returns A promise that resolves if the deletion succeeds.\n */\nexport async function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const authToken = await ref.storage.getAuthToken();\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n * @internal\n *\n * @param ref - Storage Reference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n */\nexport function getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { ReferenceCompat } from './reference';\nimport { UploadTaskCompat } from './task';\nimport { UploadTaskSnapshot } from '../src/tasksnapshot';\nimport { Metadata } from '../src/metadata';\n\nexport class UploadTaskSnapshotCompat implements types.UploadTaskSnapshot {\n  constructor(\n    readonly _delegate: UploadTaskSnapshot,\n    readonly task: UploadTaskCompat,\n    readonly ref: ReferenceCompat\n  ) {}\n\n  get bytesTransferred(): number {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata(): Metadata {\n    return this._delegate.metadata;\n  }\n  get state(): string {\n    return this._delegate.state;\n  }\n  get totalBytes(): number {\n    return this._delegate.totalBytes;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UploadTask } from '../src/task';\nimport { UploadTaskSnapshotCompat } from './tasksnapshot';\nimport { TaskEvent } from '../src/implementation/taskenums';\nimport * as types from '@firebase/storage-types';\nimport {\n  StorageObserver,\n  ErrorFn,\n  CompleteFn,\n  Subscribe,\n  Unsubscribe\n} from '../src/implementation/observer';\nimport { UploadTaskSnapshot } from '../src/tasksnapshot';\nimport { ReferenceCompat } from './reference';\nimport { FirebaseStorageError } from '../src/implementation/error';\n\nexport class UploadTaskCompat implements types.UploadTask {\n  private readonly _snapshot: UploadTaskSnapshotCompat;\n  constructor(\n    private readonly _delegate: UploadTask,\n    private readonly _ref: ReferenceCompat\n  ) {\n    this._snapshot = new UploadTaskSnapshotCompat(\n      this._delegate.snapshot,\n      this,\n      this._ref\n    );\n  }\n\n  get snapshot(): UploadTaskSnapshotCompat {\n    return this._snapshot;\n  }\n\n  cancel = this._delegate.cancel.bind(this._delegate);\n  catch = this._delegate.catch.bind(this._delegate);\n  pause = this._delegate.pause.bind(this._delegate);\n  resume = this._delegate.resume.bind(this._delegate);\n\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshotCompat) => unknown) | null,\n    onRejected?: ((a: FirebaseStorageError) => unknown) | null\n  ): Promise<unknown> {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(\n          new UploadTaskSnapshotCompat(snapshot, this, this._ref)\n        );\n      }\n    }, onRejected);\n  }\n\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | types.StorageObserver<UploadTaskSnapshotCompat>\n      | null\n      | ((a: UploadTaskSnapshotCompat) => unknown),\n    error?: ErrorFn | null,\n    completed?: CompleteFn | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshotCompat> {\n    let wrappedNextOrObserver:\n      | StorageObserver<UploadTaskSnapshot>\n      | undefined\n      | ((a: UploadTaskSnapshot) => unknown) = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = (taskSnapshot: UploadTaskSnapshot) =>\n          nextOrObserver(\n            new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n          );\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next\n            ? (taskSnapshot: UploadTaskSnapshot) =>\n                nextOrObserver.next!(\n                  new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n                )\n            : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(\n      type,\n      wrappedNextOrObserver,\n      error || undefined,\n      completed || undefined\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { ListResult } from '../src/list';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\n\nexport class ListResultCompat implements types.ListResult {\n  constructor(\n    private readonly _delegate: ListResult,\n    private readonly _service: StorageServiceCompat\n  ) {}\n\n  get prefixes(): ReferenceCompat[] {\n    return this._delegate.prefixes.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get items(): ReferenceCompat[] {\n    return this._delegate.items.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get nextPageToken(): string | null {\n    return this._delegate.nextPageToken || null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Reference,\n  getChild,\n  uploadBytesResumable,\n  uploadString,\n  list,\n  listAll,\n  getDownloadURL,\n  getMetadata,\n  updateMetadata,\n  deleteObject\n} from '../src/reference';\nimport * as types from '@firebase/storage-types';\nimport { Metadata } from '../src/metadata';\nimport { StringFormat } from '../src/implementation/string';\nimport { ListOptions } from '../src/list';\nimport { UploadTaskCompat } from './task';\nimport { ListResultCompat } from './list';\nimport { StorageServiceCompat } from './service';\nimport { invalidRootOperation } from '../src/implementation/error';\n\nexport class ReferenceCompat implements types.Reference {\n  constructor(\n    private readonly _delegate: Reference,\n    public storage: StorageServiceCompat\n  ) {}\n\n  get name(): string {\n    return this._delegate.name;\n  }\n\n  get bucket(): string {\n    return this._delegate.bucket;\n  }\n\n  get fullPath(): string {\n    return this._delegate.fullPath;\n  }\n\n  toString(): string {\n    return this._delegate.toString();\n  }\n\n  /**\n   * @returns A reference to the object obtained by\n   * appending childPath, removing any duplicate, beginning, or trailing\n   * slashes.\n   */\n  child(childPath: string): types.Reference {\n    const reference = getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root(): types.Reference {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n\n  /**\n   * @returns A reference to the parent of the\n   * current object, or null if the current object is the root.\n   */\n  get parent(): types.Reference | null {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data - The blob to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata?: Metadata\n  ): types.UploadTask {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(\n      uploadBytesResumable(this._delegate, data, metadata),\n      this\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param value - The string to upload.\n   * @param format - The format of the string to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  putString(\n    value: string,\n    format: StringFormat = StringFormat.RAW,\n    metadata?: Metadata\n  ): types.UploadTask {\n    this._throwIfRoot('putString');\n    return new UploadTaskCompat(\n      uploadString(this._delegate, value, format, metadata),\n      this\n    );\n  }\n\n  /**\n   * List all items (files) and prefixes (folders) under this storage reference.\n   *\n   * This is a helper method for calling list() repeatedly until there are\n   * no more results. The default pagination size is 1000.\n   *\n   * Note: The results may not be consistent if objects are changed while this\n   * operation is running.\n   *\n   * Warning: listAll may potentially consume too many resources if there are\n   * too many results.\n   *\n   * @returns A Promise that resolves with all the items and prefixes under\n   *  the current storage reference. `prefixes` contains references to\n   *  sub-directories and `items` contains references to objects in this\n   *  folder. `nextPageToken` is never returned.\n   */\n  listAll(): Promise<types.ListResult> {\n    return listAll(this._delegate).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * List items (files) and prefixes (folders) under this storage reference.\n   *\n   * List API is only available for Firebase Rules Version 2.\n   *\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\n   *\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n   * support objects whose paths end with \"/\" or contain two consecutive\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n   * list() may fail if there are too many unsupported objects in the bucket.\n   *\n   * @param options - See ListOptions for details.\n   * @returns A Promise that resolves with the items and prefixes.\n   * `prefixes` contains references to sub-folders and `items`\n   * contains references to objects in this folder. `nextPageToken`\n   * can be used to get the rest of the results.\n   */\n  list(options?: ListOptions | null): Promise<types.ListResult> {\n    return list(this._delegate, options).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * A promise that resolves with the metadata for this object. If this\n   * object doesn't exist or metadata cannot be retreived, the promise is\n   * rejected.\n   */\n  getMetadata(): Promise<Metadata> {\n    return getMetadata(this._delegate);\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata - The new metadata for the object.\n   * Only values that have been explicitly set will be changed. Explicitly\n   * setting a value to null will remove the metadata.\n   * @returns A promise that resolves\n   * with the new metadata for this object.\n   * @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(metadata: Metadata): Promise<Metadata> {\n    return updateMetadata(this._delegate, metadata);\n  }\n\n  /**\n   * @returns A promise that resolves with the download\n   * URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    return getDownloadURL(this._delegate);\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @returns A promise that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n\n  private _throwIfRoot(name: string): void {\n    if (this._delegate._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: FirebaseStorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport firebase from '@firebase/app';\nimport * as backoff from './backoff';\nimport {\n  FirebaseStorageError,\n  unknown,\n  appDeleted,\n  canceled,\n  retryLimitExceeded\n} from './error';\nimport { RequestInfo } from './requestinfo';\nimport * as type from './type';\nimport * as UrlUtils from './url';\nimport { Headers, XhrIo, ErrorCode } from './xhrio';\nimport { XhrIoPool } from './xhriopool';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\nclass NetworkRequest<T> implements Request<T> {\n  private url_: string;\n  private method_: string;\n  private headers_: Headers;\n  private body_: string | Blob | Uint8Array | null;\n  private successCodes_: number[];\n  private additionalRetryCodes_: number[];\n  private pendingXhr_: XhrIo | null = null;\n  private backoffId_: backoff.id | null = null;\n  private resolve_!: (value?: T | PromiseLike<T> | undefined) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private callback_: (p1: XhrIo, p2: string) => T;\n  private errorCallback_:\n    | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null;\n  private progressCallback_: ((p1: number, p2: number) => void) | null;\n  private timeout_: number;\n  private pool_: XhrIoPool;\n  promise_: Promise<T>;\n\n  constructor(\n    url: string,\n    method: string,\n    headers: Headers,\n    body: string | Blob | Uint8Array | null,\n    successCodes: number[],\n    additionalRetryCodes: number[],\n    callback: (p1: XhrIo, p2: string) => T,\n    errorCallback:\n      | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n      | null,\n    timeout: number,\n    progressCallback: ((p1: number, p2: number) => void) | null,\n    pool: XhrIoPool\n  ) {\n    this.url_ = url;\n    this.method_ = method;\n    this.headers_ = headers;\n    this.body_ = body;\n    this.successCodes_ = successCodes.slice();\n    this.additionalRetryCodes_ = additionalRetryCodes.slice();\n    this.callback_ = callback;\n    this.errorCallback_ = errorCallback;\n    this.progressCallback_ = progressCallback;\n    this.timeout_ = timeout;\n    this.pool_ = pool;\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const self = this;\n\n    function doTheRequest(\n      backoffCallback: (p1: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ): void {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const xhr = self.pool_.createXhrIo();\n      self.pendingXhr_ = xhr;\n\n      function progressListener(progressEvent: ProgressEvent): void {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (self.progressCallback_ !== null) {\n          self.progressCallback_(loaded, total);\n        }\n      }\n      if (self.progressCallback_ !== null) {\n        xhr.addUploadProgressListener(progressListener);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      xhr\n        .send(self.url_, self.method_, self.body_, self.headers_)\n        .then((xhr: XhrIo) => {\n          if (self.progressCallback_ !== null) {\n            xhr.removeUploadProgressListener(progressListener);\n          }\n          self.pendingXhr_ = null;\n          xhr = xhr as XhrIo;\n          const hitServer = xhr.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = xhr.getStatus();\n          if (!hitServer || self.isRetryStatusCode_(status)) {\n            const wasCanceled = xhr.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = self.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, xhr));\n        });\n    }\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    function backoffDone(\n      requestWentThrough: boolean,\n      status: RequestEndStatus\n    ): void {\n      const resolve = self.resolve_;\n      const reject = self.reject_;\n      const xhr = status.xhr as XhrIo;\n      if (status.wasSuccessCode) {\n        try {\n          const result = self.callback_(xhr, xhr.getResponseText());\n          if (type.isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (xhr !== null) {\n          const err = unknown();\n          err.serverResponse = xhr.getResponseText();\n          if (self.errorCallback_) {\n            reject(self.errorCallback_(xhr, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = self.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    }\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = backoff.start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      backoff.stop(this.backoffId_);\n    }\n    if (this.pendingXhr_ !== null) {\n      this.pendingXhr_.abort();\n    }\n  }\n\n  private isRetryStatusCode_(status: number): boolean {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n      // Request Timeout: web server didn't receive full request in time.\n      408,\n      // Too Many Requests: you're getting rate-limited, basically.\n      429\n    ];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode =\n      this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public xhr: XhrIo | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(headers: Headers): void {\n  const version =\n    typeof firebase !== 'undefined' ? firebase.SDK_VERSION : 'AppManager';\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + version;\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function makeRequest<T>(\n  requestInfo: RequestInfo<T>,\n  appId: string | null,\n  authToken: string | null,\n  pool: XhrIoPool\n): Request<T> {\n  const queryPart = UrlUtils.makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers);\n  return new NetworkRequest<T>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    pool\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\nexport function start(\n  f: (p1: (success: boolean) => void, canceled: boolean) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let timeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    timeoutId = setTimeout(() => {\n      timeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function handler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      return;\n    }\n    if (success) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    if (triggeredCallback) {\n      return;\n    }\n    if (timeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(timeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { XhrIoPool } from './implementation/xhriopool';\nimport { Reference, getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  _FirebaseService\n} from '@firebase/app-types-exp';\nimport * as constants from '../src/implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: StorageService, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: StorageService | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof StorageService) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      if (path.includes('..')) {\n        throw invalidArgument('`path` param cannot contain \"..\"');\n      }\n      return getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: StorageService, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: StorageService | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: StorageService | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof StorageService) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(config?: FirebaseOptions): Location | null {\n  const bucketString = config?.[constants.CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString);\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n */\nexport class StorageService implements _FirebaseService {\n  /**\n   * @internal\n   */\n  readonly _bucket: Location | null = null;\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n\n  constructor(\n    readonly app: FirebaseApp,\n    /**\n     * @internal\n     */\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _pool: XhrIoPool,\n    /**\n     * @internal\n     */\n    readonly _url?: string\n  ) {\n    this._maxOperationRetryTime = constants.DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = constants.DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url);\n    } else {\n      this._bucket = extractBucket(this.app.options);\n    }\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async getAuthToken(): Promise<string | null> {\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   * @internal\n   */\n  _delete(): Promise<void> {\n    this._deleted = true;\n    this._requests.forEach(request => request.cancel());\n    this._requests.clear();\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @internal\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  makeRequest<T>(\n    requestInfo: RequestInfo<T>,\n    authToken: string | null\n  ): Request<T> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        this._pool\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { StorageService, isUrl, ref } from '../src/service';\nimport { Location } from '../src/implementation/location';\nimport { ReferenceCompat } from './reference';\nimport { invalidArgument } from '../src/implementation/error';\nimport { FirebaseApp } from '@firebase/app-types';\n\n/**\n * A service that provides firebaseStorage.Reference instances.\n * @param opt_url gs:// url to a custom Storage Bucket\n */\nexport class StorageServiceCompat implements types.FirebaseStorage {\n  constructor(public app: FirebaseApp, readonly _delegate: StorageService) {}\n\n  INTERNAL = {\n    /**\n     * Called when the associated app is deleted.\n     */\n    delete: () => {\n      return this._delegate._delete();\n    }\n  };\n\n  get maxOperationRetryTime(): number {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._delegate.maxUploadRetryTime;\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference for the given path in the default\n   * bucket.\n   */\n  ref(path?: string): types.Reference {\n    if (isUrl(path)) {\n      throw invalidArgument(\n        'ref() expected a child path but got a URL, use refFromURL instead.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\n   * which must be a gs:// or http[s]:// URL.\n   */\n  refFromURL(url: string): types.Reference {\n    if (!isUrl(url)) {\n      throw invalidArgument(\n        'refFromURL() expected a full URL but got a child path, use ref() instead.'\n      );\n    }\n    try {\n      Location.makeFromUrl(url);\n    } catch (e) {\n      throw invalidArgument(\n        'refFromUrl() expected a valid full URL but got an invalid one.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time: number): void {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time: number): void {\n    this._delegate.maxOperationRetryTime = time;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { StringFormat } from '../src/implementation/string';\nimport { TaskEvent, TaskState } from '../src/implementation/taskenums';\n\nimport { XhrIoPool } from '../src/implementation/xhriopool';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport { StorageService } from '../src/service';\nimport * as types from '@firebase/storage-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage';\n\nfunction factory(\n  container: ComponentContainer,\n  url?: string\n): types.FirebaseStorage {\n  // Dependencies\n  // TODO: This should eventually be 'app-compat'\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n\n  // TODO: get StorageService instance from component framework instead\n  // of creating a new one.\n  const storageServiceCompat: StorageServiceCompat = new StorageServiceCompat(\n    app,\n    new StorageService(app, authProvider, new XhrIoPool(), url)\n  );\n  return storageServiceCompat;\n}\n\nexport function registerStorage(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    TaskState,\n    TaskEvent,\n    StringFormat,\n    Storage: StorageService,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(STORAGE_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase as _FirebaseNamespace);\n\n/**\n * Define extension behavior for `registerStorage`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    storage?: {\n      (app?: FirebaseApp): types.FirebaseStorage;\n      Storage: typeof types.FirebaseStorage;\n\n      StringFormat: {\n        BASE64: types.StringFormat;\n        BASE64URL: types.StringFormat;\n        DATA_URL: types.StringFormat;\n        RAW: types.StringFormat;\n      };\n      TaskEvent: {\n        STATE_CHANGED: types.TaskEvent;\n      };\n      TaskState: {\n        CANCELED: types.TaskState;\n        ERROR: types.TaskState;\n        PAUSED: types.TaskState;\n        RUNNING: types.TaskState;\n        SUCCESS: types.TaskState;\n      };\n    };\n  }\n  interface FirebaseApp {\n    storage?(storageBucket?: string): types.FirebaseStorage;\n  }\n}\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","_","label","sent","trys","ops","g","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__spreadArrays","il","r","k","a","j","jl","ERROR_NAME","Error","code","message","customData","_super","_this","FirebaseError","captureStackTrace","ErrorFactory","_i","data","fullCode","service","template","errors","replace","PATTERN","key","String","fullMessage","serviceName","Component","mode","instantiationMode","multipleInstances","props","serviceProps","name","instanceFactory","type","DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","FirebaseStorageError","prependCode","serverResponse","Code","UNKNOWN","OBJECT_NOT_FOUND","BUCKET_NOT_FOUND","PROJECT_NOT_FOUND","QUOTA_EXCEEDED","UNAUTHENTICATED","UNAUTHORIZED","RETRY_LIMIT_EXCEEDED","INVALID_CHECKSUM","CANCELED","INVALID_EVENT_NAME","INVALID_URL","INVALID_DEFAULT_BUCKET","NO_DEFAULT_BUCKET","CANNOT_SLICE_BLOB","SERVER_FILE_WRONG_SIZE","NO_DOWNLOAD_URL","INVALID_ARGUMENT","INVALID_ARGUMENT_COUNT","APP_DELETED","INVALID_ROOT_OPERATION","INVALID_FORMAT","INTERNAL_ERROR","UNSUPPORTED_ENVIRONMENT","unknown","canceled","cannotSliceBlob","invalidArgument","appDeleted","invalidRootOperation","invalidFormat","format","internalError","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","contentType","dataFromString","stringData","StringData","utf8Bytes_","base64Bytes_","dataUrl","parts","DataURLParts","base64","rest","decoded","decodeURIComponent","percentEncodedBytes_","dataURLBytes_","c","charCodeAt","Uint8Array","hasMinus","indexOf","hasUnder","hasPlus","hasSlash","bytes","atob","array","dataURL","matches","match","end","middle","substring","ErrorCode","TaskEvent","STATE_CHANGED","InternalTaskState","TaskState","RUNNING","PAUSED","SUCCESS","ERROR","taskStateFromInternalTaskState","state","NetworkXhrIo","url","method","headers","sent_","xhr_","open","undefined","setRequestHeader","toString","send","sendPromise_","errorCode_","status","responseText","abort","header","getResponseHeader","listener","upload","addEventListener","removeEventListener","XMLHttpRequest","NO_ERROR","ABORT","NETWORK_ERROR","XhrIoPool","isString","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","getBlob","args","BlobBuilder","WebKitBlobBuilder","bb","append","type.isNativeBlobDefined","FbsBlob","size_","type_","startByte","endByte","type.isNativeBlob","data_","realBlob","sliced","start","blob","webkitSlice","mozSlice","slice","buffer","blobby","map","val","fs.getBlob","uint8Arrays","type.isString","finalLength_1","forEach","byteLength","merged_1","index_1","elideCopy","size","blobType","ArrayBuffer","set","Location","path_","path","encode","encodeURIComponent","bucket","bucketString","bucketLocation","makeFromUrl","location","bucketDomain","gsRegex","RegExp","httpModify","loc","firebaseStorageHost","groups","regex","indices","postModify","charAt","group","captures","exec","jsonObjectOrNull","obj","JSON","parse","isArray","lastComponent","index","lastIndexOf","makeUrl","urlPart","makeQueryString","params","queryPart","noXform_","metadata","server","local","writable","xform","mappings_","getMappings","mappings","Mapping","nameMapping","_metadata","fullPath","path.lastComponent","sizeMapping","Number","addRef","defineProperty","get","makeStorageReference","fromResourceString","resourceString","json.jsonObjectOrNull","resource","len","mapping","fromResource","toResourceString","stringify","PREFIXES_KEY","ITEMS_KEY","fromResponseString","listResult","prefixes","items","nextPageToken","_a","pathWithoutTrailingSlash","reference","_c","_b","item","fromBackendResponse","handler","timeout","handlerCheck","cndn","metadataHandler","xhr","text","MetadataUtils.fromResourceString","listHandler","ListResultUtils.fromResponseString","downloadUrlHandler","tokens","split","token","UrlUtils.makeUrl","UrlUtils.makeQueryString","alt","MetadataUtils.downloadUrlFromResourceString","sharedErrorHandler","err","newErr","getStatus","objectErrorHandler","shared","getMetadata","fullServerUrl","maxOperationRetryTime","requestInfo","RequestInfo","errorHandler","metadataForUpload_","metadataClone","multipartUpload","bucketOnlyServerUrl","X-Goog-Upload-Protocol","boundary","str","Math","random","genBoundary","metadata_","preBlobPart","MetadataUtils.toResourceString","postBlobPart","urlParams","maxUploadRetryTime","uploadData","current","total","finalized","checkResumeHeader_","allowed","createResumableUpload","metadataForUpload","X-Goog-Upload-Command","X-Goog-Upload-Header-Content-Length","X-Goog-Upload-Header-Content-Type","Content-Type","getResumableUploadStatus","sizeString","isNaN","ResumableUploadStatus","continueResumableUpload","chunkSize","progressCallback","status_","bytesLeft","bytesToUpload","min","X-Goog-Upload-Offset","uploadStatus","newCurrent","nextOrObserver","error","complete","observer","bytesTransferred","totalBytes","task","ref","async","argsToForward","UploadTask","sizeBefore","_transferred","loaded","_updateProgress","_state","_request","_resumable","_uploadUrl","_createResumable","_needToFetchStatus","_fetchStatus","_needToFetchMetadata","_fetchMetadata","_continueUpload","_oneShotUpload","callback","_ref","storage","getAuthToken","authToken","_transition","_resolveToken","fbsRequests.createResumableUpload","_location","_mappings","_blob","createRequest","makeRequest","getPromise","completeTransitions_","_errorHandler","fbsRequests.getResumableUploadStatus","statusRequest","_chunkMultiplier","fbsRequests.ResumableUploadStatus","fbsRequests.continueResumableUpload","_makeProgressCallback","_error","uploadRequest","newStatus","_increaseMultiplier","fbsRequests.getMetadata","metadataRequest","_metadataErrorHandler","fbsRequests.multipartUpload","multipartRequest","transferred","old","_notifyObservers","cancel","wasPaused","_start","externalState","UploadTaskSnapshot","completed","Observer","_addObserver","_removeObserver","onFulfilled","onRejected","_promise","_observers","_notifyObserver","splice","_finishPromise","_resolve","triggered","fbsAsync","bind","snapshot","_reject","valid","_shouldDoResumable","codeEquals","Reference","newRef","_service","newPath","parent","listAll","accumulator","listAllHelper","pageToken","list","nextPage","options","maxResults","delimiter","isRoot","updateMetadata","_throwIfRoot","getDownloadURL","deleteObject","_xhr","_text","successCodes","getChild","childPath","canonicalChildPath","filter","component","join","UploadTaskSnapshotCompat","_delegate","UploadTaskCompat","_snapshot","wrappedNextOrObserver","taskSnapshot","on","catch","pause","resume","ListResultCompat","ReferenceCompat","root","requestsGetMetadata","FailRequest","promise_","_appDelete","NetworkRequest","waitSeconds","timeoutId","hitTimeout","cancelState","triggeredCallback","stopped","self","backoffDone","requestWentThrough","resolve_","reject_","wasSuccessCode","callback_","getResponseText","errorCallback_","appDelete_","triggerCallback","callWithDelay","millis","setTimeout","success","stop","wasTimeout","clearTimeout","canceled_","RequestEndStatus","backoffId_","backoffCallback","progressListener","progressEvent","lengthComputable","progressCallback_","pool_","createXhrIo","pendingXhr_","addUploadProgressListener","url_","method_","body_","headers_","removeUploadProgressListener","hitServer","getErrorCode","isRetryStatusCode_","successCode","successCodes_","wasCanceled","timeout_","appDelete","id","isFiveHundredCode","isExtraRetryCode","isRequestSpecificRetryCode","additionalRetryCodes_","additionalRetryCodes","errorCallback","pool","start_","appId","version","firebase","SDK_VERSION","isUrl","test","refFromPath","StorageService","_bucket","includes","serviceOrRef","pathOrUrl","_maxUploadRetryTime","time","POSITIVE_INFINITY","_maxOperationRetryTime","auth","_authProvider","getImmediate","optional","getToken","tokenData","accessToken","_deleted","_requests","request","clear","request_1","_appId","_pool","add","delete","app","_url","Set","makeFromBucketSpec","config","constants.CONFIG_STORAGE_BUCKET_KEY","StorageServiceCompat","_delete","instance","namespaceExports","factory","container","getProvider","authProvider","Storage","INTERNAL","registerComponent","setServiceProps","setMultipleInstances","registerVersion"],"mappings":"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"}